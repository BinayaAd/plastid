Determine P-site offsets for :term:`ribosome profiling` data
============================================================

In this tutorial we:

  - determine the :term:`P-site offset` to use with a
    :term:`ribosome profiling` dataset.
     
  - use these offsets as a :term:`mapping rule` to map :term:`read alignments`
    from that dataset to their P-sites, enabling visualization of translation

Here, we presume that ribosome-protected fragments were produced using
an unbiased nuclease (e.g. RNase I, NOT microccal nuclease). that
trims the :term:`ribosome-protected footprints <footprint>` to the
edges of the ribosome.

We will use the :doc:`/test_dataset` of yeast chromosome I.


Strategy
--------
Following :cite:`Ingolia2009`, an effective way to map P-sites is to use
:term:`peaks of ribosome density that occur over start codons <start codon peak>`.

Because the ribosomal P-site is somewhere internal to the
:term:`ribosome protected footprint` generated by ribosome profiling, when
we map :term:`read alignments` of :term:`footprints <footprint>` to their
5' ends, we would expect to see a peak of ribosome density *upstream* of
the start codon. The distance between the peak and the start codon
corresponds to the offset:

 .. figure:: /_static/images/p_site_map_cartoon.png
    :alt: Cartoon of ribosomal P-site
    :width: 30ex
    :align: center
    :figclass: captionfigure
    
    A ribosome containing a :term:`footprint` after digestion. The P-site offset
    is the distance from the 5' end of the read to the ribosomal P-site
    (in this case, 12 nt). After :cite:`Ingolia2009`.

This yields the following strategy:

 #. Separate :term:`footprints <footprint>` into classes based upon their lengths

 #. For each length:

      #. Perform a :term:`metagene analysis <metagene>` at the start codon,
         in which the :term:`footprints <footprint>` are mapped to their 5' ends.

      #. Measure the distance between the highest peak 5' of the start codon
         and the start codon. Assuming this peak is the initiation peak, this
         distance is the offset to use for reads of this length:
         
         .. figure:: /_static/images/p_site_offset_by_length.png
            :alt: P-site offsets, by read length
            :figclass: captionfigure
            
            :term:`Metagene` analysis of individual read lengths mapped to their
            5' ends to discover :term:`P-site offsets <P-site offset>`

 #. Manually inspect offsets to make sure they seem reasonable

 #. Check results by perform a :term:`metagene analysis` around the start codon, 
    this time using the :term:`P-site offsets <P-site offset>` we determined.
    Results should resemble the image below:

         .. figure:: /_static/images/p_site_applied.png
            :alt: Metagene around start codin with P-site offsets applied
            :figclass: captionfigure
            
            :term:`Metagene` analysis surrounding start codon, with
            :term:`P-site offsets <P-site offset>` applied to read alignments


Determining :term:`P-site offsets <P-site offset>` using the |psite| script
---------------------------------------------------------------------------
The strategy above is implemented by |psite|, which can be
executed from the terminal.

Because |psite| internally performs :term:`metagene analysis <metagene>`, we need
to use a file produced by the |metagene| script. The command call to 
|metagene| is included below, and explained in detal in :doc:`/examples/metagene`.
From the terminal:

 .. code-block:: shell

    # generate metagene `roi` file. See `metagene` documentation for details
    $ metagene generate chrI --landmark cds_start --annotation_files sgd_plus_utrs_chrI.gtf

    # run the psite script
    # We ignore reads shorter than 25 nucleotides or longer than 35-
    # there should be few of these, and it saves psite from doing 
    # unnecessary analyses
    $ psite chrI_rois.txt SRR1562907 --min_length 25 --max_length 35 --require_upstream --count_files SRR1562907_chrI.bam

The script will make many files, two of which are of interest to most users:

  #. A two-column text file (``SRR1562907_p_offsets.txt``), in which the first
     column is a read length and the second, the corresponding :term:`P-site offset`
     from the 5' end of the read::

        #length	p_offset
        25	9
        26	12
        27	11
        28	12
        29	12
        30	13
        31	13
        32	13
        33	13
        34	13
        35	13
        default	13

  #. An SVG graphic (``SRR1562907_p_offsets.svg``), showing the metagene
     profiles for each read length:

        [TODO: include updated graphic]



Using the P-site offset in analyses
-----------------------------------

In command-line scripts
.......................

Command-line scripts in :mod:`yeti <yeti.bin>` use a common interface for
read :term:`mapping rules <mapping rule>`. To use the offsets generated by |psite|, use
the ``--fiveprime_variable`` mapping rule, and pass the text file made
by |psite| to the ``--offset`` parameter. For example, from the terminal:

 .. code-block :: shell

    $ some_script --offset SRR1562907_p_offsets.txt --fiveprime_variable --offset SRR1562907_p_offsets.txt [other arguments]


In interactive sessions
.......................

In interactive sessions, we first need to load the offset file::

    >>> offset_dict = {}

    >>> with open("SRR1562907_p_offsets.txt") as fin:
    >>>     for line in fin: 
    >>>         if not line.startswith("#"): # ignore comments & metadata
    >>>             length, offset = line.strip("\n").split("\t")
    >>>             offset_dict[length] = int(offset)


And then pass it to the appropriate mapping rule. For alignments in `BAM`_
format, use |BAMGenomeArray|::

    >>> import pysam
    >>> from yeti.genomics.genome_array import BAMGenomeArray, VariableFivePrimeMapFactory
    
    >>> alignments = BAMGenomeArray([pysam.Samfile("SRR1562907.bam","rb")])
    >>> alignments.set_mapping(VariableFivePrimeMapFactory(offset_dict))


For alignments in `bowtie`_-format use |GenomeArray|::

    >>> from yeti.genomics.genome_array import GenomeArray, variable_five_prime_map

    >>> alignments = GenomeArray()
    >>> alignments.add_from_bowtie("some_file.bowtie",variable_five_prime_map ,offset=offset_dict)


Pitfalls
--------

This P-site mapping strategy requires pronounced :term:`initiation peaks <start codon peak>` in
:term:`ribosome profiling` data. If these are absent -- which can
happen under conditions of initiation shutdown (if the sample is under
stress before lysis) -- an alternative option is to use a
:term:`stop codon peak` (if present in the data) for mapping.

The simplest way to do this is to use the |metagene| script on reads
of separate lengths, again using fiveprime end mapping (``--fiveprime``
command-line argument passed to |metagene|), and manually inspecting
the output. For each read length, assign the offset to be the distance
between the stop codon and the peak (which should be tall, and followed
by a precipitous drop in ribosome density) immediately upstream of
the stop codon.


Is it necessary to do this separately for every dataset?
--------------------------------------------------------
Many experimentalists find that their technique is sufficiently consistent
not to need to re-estimate P-site offsets for every dataset. Others are
content to use offsets published in literature by other groups. Others
more conservatively perform this analysis for every dataset. We strongly
suggest performing this analysis at the very least:

  - when changing nuclease, buffer, or cloning conditions

  - when changing culture conditions (e.g. profiling under starvation,
    heat shock, viral infection, et c)


See also
--------

  - |psite| script

  - |metagene| script

  - :doc:`/examples/metagene`
